package org.dallaybatta.test;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.commons.configuration.ConfigurationConverter;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.dallaybatta.Utility;
import org.dallaybatta.gobblin.api.Data;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.io.Closer;

import biz.paluch.rest.test.InMemoryRestServer;
import biz.paluch.rest.test.InMemoryRestTest.ChunkedDataResource;
import gobblin.configuration.ConfigurationKeys;
import gobblin.runtime.JobLauncher;
import gobblin.runtime.JobLauncherFactory;
import gobblin.util.JobLauncherUtils;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'vicky' at '31/8/17 6:22 PM' with Gradle 2.13
 *
 * @author vicky, @date 31/8/17 6:22 PM
 */
public class ChunkedSourceTest {
	
	private static final Logger LOG = LoggerFactory.getLogger(ChunkedSourceTest.class);
	private  static Properties launcherProps = new Properties();
	static List<Data> dataList = new ArrayList<Data>();
	static int DATA_COUNT = 35;
	static int port;
	
	public static InMemoryRestServer server;
	public static ChunkedDataResource chunkResource = new ChunkedDataResource();
	
	@BeforeClass
	  public static void setUp() throws Exception {
		// Populate the sample chunk data without a partition meta data.
		for(int i = 0;i<DATA_COUNT;i++){
			Data data = new Data();
			data.setInfo(""+i+i*10);
			LOG.info("Adding Data "+i);
			dataList.add(data);
		}
	    launcherProps = ConfigurationConverter.getProperties(new PropertiesConfiguration("gobblin-standalone.properties"));  
	    server = InMemoryRestServer.create(chunkResource);
	    port = Utility.getPortFromUrl(server.baseUri());
	  }
	
	@Test
	public void testLaunchJob() throws Exception {
	    Properties jobProps = Utility.loadJobProps("sample.pull");
	    jobProps.setProperty(ConfigurationKeys.JOB_NAME_KEY,
	    jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY) + "-testSampleJob");
	    try {
	    	runTest(jobProps);
	    } finally {
	      //this.jobLauncherTestHelper.deleteStateStore(jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY));
	    }
	  }
    
	@AfterClass
	  public static void tearDown() throws Exception {	 				
	    launcherProps = ConfigurationConverter.getProperties(new PropertiesConfiguration("gobblin-standalone.properties"));   
	    server.close();
	  }
	
	private void runTest(Properties jobProps) throws Exception {
   	    String jobName = jobProps.getProperty(ConfigurationKeys.JOB_NAME_KEY);
	    String jobId = JobLauncherUtils.newJobId(jobName);
	    jobProps.setProperty(ConfigurationKeys.JOB_ID_KEY, jobId);
	    LOG.info("------->>>>>"+server.baseUri());
	    jobProps.setProperty(Utility.SOURCE_REST_ENDPOINT, server.baseUri());
	    Closer closer = Closer.create();
	    try {
	      JobLauncher jobLauncher = closer.register(JobLauncherFactory.newJobLauncher(launcherProps, jobProps));
	      jobLauncher.launchJob(null);
	    } finally {
	      closer.close();
	    }
	  }
}
