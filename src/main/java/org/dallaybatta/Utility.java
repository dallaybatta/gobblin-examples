package org.dallaybatta;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.Iterator;
import java.util.Properties;

import org.apache.commons.configuration.ConfigurationConverter;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'vicky' at '31/8/17 6:22 PM' with Gradle 2.13
 *
 * @author vicky, @date 31/8/17 6:22 PM
 */
public class Utility {
	
	private static final Logger LOG = LoggerFactory.getLogger(Utility.class);
	
	public static final String WORK_UNIT_COUNT = "workunit.count";
	public static final int DEFAULT_WORK_UNIT_COUNT = 10;
	public static final String SOURCE_REST_ENDPOINT = "rest.endpoint";
	public static final String DataPartitionMetaData_CLASS = "plugin.partitionmetadata";
	public static final String DataPartitionMetaData_CLASS_IMPL = "org.dallaybatta.gobblin.impl.DataChunkSourceMetaData";
	public static final String DataReader_CLASS = "plugin.reader";
	public static final String DataReader_CLASS_IMPL = "org.dallaybatta.gobblin.impl.DemoChunkReader";
	public static final String Accumulator_CLASS = "plugin.accumulator";
	public static final String Accumulator_CLASS_IMPL = "org.dallaybatta.gobblin.impl.DefaultDataAccumulator";
	public static final String Storage_CLASS = "plugin.storage";
	public static final String Storage_CLASS_IMPL = "org.dallaybatta.gobblin.impl.InMemoryStorage";
	public static final String SOURCE_REST_RESOURCE = "rest.resource";
	
    public boolean someLibraryMethod() {
        return true;
    }
    
    public static String convertToString(Collection<String> data,String delimiter){
		  String dataString = "";
		  if(data != null){
			  Iterator<String> iter = data.iterator();
			  while(iter.hasNext()){
				  String dataElement = iter.next();
				  dataString = dataString+dataElement+delimiter;
			  }
			  dataString = dataString.substring(0,dataString.length()-1);
		  }
		  return dataString;
	  }
    
    public static Properties loadJobProps(String pullFileName) throws IOException {
	    Properties jobProps = new Properties();
	    try {
	    	jobProps = ConfigurationConverter.getProperties(new PropertiesConfiguration(pullFileName));
		} catch (ConfigurationException e) {
			e.printStackTrace();
		}
	    return jobProps;
	}
    
    public static int getPortFromUrl(String URL){
    	URL url = null;
		try {
			url = new URL(URL);
		} catch (MalformedURLException e) {
		}
    	int port = url.getPort();
    	return port;
    }
    
    public static void delay(int milliSeconds){
    	try {
			Thread.sleep(milliSeconds);
		} catch (InterruptedException e) {
		}
    }

	public static int convertToInt(String number) {
		return Integer.parseInt(number);
	}
	
	public static <T> T instantiate(String className) {
			T type = null;
			try {
				Class clazz = Class.forName(className);
				type = (T) clazz.newInstance();
			} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
				LOG.error(" Unable to load the class "+e);
			}
			return type;
	}
}
